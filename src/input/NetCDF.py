"""
File that contains the functions to read files in NetCDF4 format.
"""
from src.utils import get_logger
from src.error.netcdf_import_error import NetCDFImportError

import numpy as np
from netCDF4 import Dataset

# Variables to use to check for data in the netcdf files
LONGITUDE_KEYS = ['x', 'lon']
LATITUDE_KEYS = ['y', 'lat']
HEIGHT_KEYS = ['z', 'Band1']

log = get_logger(module='NETCDF')


def get_variables_from_grp(grp, key_values: list) -> list:
    """
    Get the list of values from a grp object.

    Args:
        key_values: Possible key values to search for
        grp: Grp object generated by the netcdf4 library

    Returns: List with values
    """
    grp_keys = grp.variables.keys()

    # Check for the key to be in the object
    for key in key_values:
        if key in grp_keys:
            return grp.variables[key]

    raise NetCDFImportError(1, grp_keys)


def read_info(file_name: str):
    """
    Extract the information of X, Y and Z from a NetCDF4 file.

    Args:
        file_name (str): Filename to analyze.

    Returns:
        np.array, np.array, np.array: Values of the variables X, Y
                                      and Z in the file.
    """
    root_grp = Dataset(file_name, "r", format="NETCDF4")

    x = np.array(get_variables_from_grp(root_grp, LONGITUDE_KEYS))
    y = np.array(get_variables_from_grp(root_grp, LATITUDE_KEYS))
    z = np.array(get_variables_from_grp(root_grp, HEIGHT_KEYS))

    return x, y, z


if __name__ == "__main__":
    filename = "test_inputs/IF_ETOPO_HHC_60Ma_60.00Ma.nc"
    rootgrp = Dataset(filename, "r", format="NETCDF4")

    print("Dimensiones del archivo:")
    print(rootgrp.dimensions)

    print("Grupos del archivo:")
    print(rootgrp.groups)

    print("Variables del archivo:")
    print(rootgrp.variables)

    X, Y, Z = read_info(filename)

    print("X values")
    print(X)

    print("Y values")
    print(Y)

    print("Z values.")
    print(Z)
