@startuml
            class Scene{
                - __bilinear_interpolation(x, y, points): float
                - __process_filters(filters): list
                - __transform_points_using_linear_transformation(polygon_id, model_id, min_height, max_height, filters)
                + add_model(model)
                + add_new_vertex_to_polygon_using_map_coords(x_coord, y_coord, polygon_id)
                + add_new_vertex_to_polygon_using_window_coords(position_x, position_y, polygon_id, model_id,
                                                                scene_settings_data, window_settings_data)
                + add_polygon(polygon)
                + apply_smoothing_algorithm(polygon_id, model_id, distance_to_polygon)
                + calculate_map_position_from_window(position_x, position_y, polygon_id, model_id, scene_settings_data,
                                                       window_settings_data): (float, float)
                + calculate_max_min_height(model_id, polygon_id): tuple
                + change_camera_azimuthal_angle(angle)
                + change_camera_elevation(angle)
                + change_color_of_polygon(polygon_id, color)
                + change_dot_color_of_polygon(polygon_id, color)
                + change_height_unit_3D_model(model_id, measure_unit)
                + change_map_unit_3D_model(model_id, measure_unit)
                + change_model_draw_priority(model_id, new_position)
                + change_normalization_height_factor(active_model, new_factor)
                + change_polygon_draw_priority(polygon_id, new_position)
                + create_3D_model_if_not_exists(model_id)
                + create_new_polygon(): str
                + delete_polygon_by_id(polygon_id)
                + delete_polygon_param(polygon_id, key)
                + draw(active_model_id, active_polygon_id, program_view_mode)
                + get_3d_model_list(): List[str]
                + get_active_model_projection_matrix(): array
                + get_active_model_showed_limits(): dict
                + get_camera_view_matrix(): array
                + get_extra_reload_proportion_setting(): float
                + get_height_normalization_factor(model_3d_id): float
                + get_map2dmodel_vertices_array(model_id): array
                + get_model_coordinates_arrays(model_id): (array, array)
                + get_model_height_on_coordinates(x_coordinate, y_coordinate, model_id): float
                + get_model_information(): dict
                + get_model_list(): List[str]
                + get_point_list_from_polygon(polygon_id): list
                + get_polygon_id_list(): list
                + get_polygon_name(polygon_id): str
                + get_polygon_params(polygon_id)
                + get_render_settings(): dict
                + initialize(engine)
                + interpolate_points(polygon_id, model_id, distance, type_interpolation)
                + is_polygon_planar(polygon_id)
                + load_model_from_file_async(path_color_file, path_model, model_id)
                + load_preview_interpolation_area(distance, z_value)
                + modify_camera_radius(distance)
                + move_camera(movement)
                + move_models(x_movement, y_movement)
                + optimize_gpu_memory_async(then)
                + reload_models_async(quality, then)
                + remove_all_models()
                + remove_interpolation_preview(polygon_id)
                + remove_last_point_from_active_polygon()
                + remove_model(id_model)
                + remove_model_3d(id_model)
                + reset_camera_values()
                + set_loading_message(new_msg)
                + set_models_polygon_mode(polygon_mode)
                + set_polygon_name(polygon_id, new_name)
                + set_polygon_param(polygon_id, key, value)
                + set_thread_task(parallel_task, then)
                + transform_points(polygon_id, model_id, min_height, max_height, transformation_type, filters)
                + update_3D_model(model_id)
                + update_models_colors()
                + update_models_projection_matrix()
                + update_viewport(scene_data)

                - __3d_model_hash: dictionary
                - __bottom_coordinate: float
                - __camera: Camera
                - __engine : Engine
                - __height_viewport: int
                - __left_coordinate: float
                - __model_draw_priority: list
                - __model_hash : dictionary
                - __polygon_draw_priority: list
                - __polygon_id_count: int
                - __projection_matrix_2D: array
                - __projection_matrix_3D: array
                - __projection_z_axis_max_value: int
                - __projection_z_axis_min_value: int
                - __right_coordinate: float
                - __should_execute_then_optimize_gpu_memory: int
                - __should_execute_then_reload: int
                - __top_coordinate: float
                - __width_viewport: int
                - __x: list
                - __y: list
            }
@enduml