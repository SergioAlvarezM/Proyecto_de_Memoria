@startuml

' Variable definition
!$file = "(F,#ff75ff) File"

' Configuration definition
title Class Diagram For Reliefe Creator
set namespaceSeparator .

' Package hierarchy
package src {
    package engine {
        package model {
            package transformations {}
        }
        package data {}
        package controller {}
        package GUI {
            package frames {}
        }
        package scene {}
    }
    package input {}
}


' Classes definition
class src.engine.GUI.GUIManager{
    - __implementation: GlfwRenderer
    - __glfw_window: GLFWWindow
    - __component_list: list
    - __io: IMGUI.io
    - __font: IMGUI.font

    + initialize(window, mode)
    + add_frames(component_list)
    + fix_frames_position(value)
    + process_input()
    + draw_frames()
    + render()
}

class src.engine.settings << $file >>{
    + WIDTH : int
    + HEIGHT : int
    + FONT_SIZE : int
    + CLEAR_COLOR : list
    + FLOAT_BYTES : int
    + SCENE_BEGIN_X : int
    + SCENE_BEGIN_Y : int
    + SCENE_END_X : int
    + SCENE_END_Y : int
}

class src.engine.model.transformations.transformations <<$file>> {
    + identity() : array
    + uniformScale(s) : array
    + scale(sx,sy,sz) : array
    + rotationX(theta) : array
    + rotationY(theta) : array
    + rotationZ(theta) : array
    + rotationA(theta, axis) : array
    + translate(tx, ty, tz) : array
    + shearing(xy, yx, xz, zx, yz, zy) : array
    + matmul(mats) : array
    + frustum(left, right, bottom, top, near, far) : array
    + perspective(fovy, aspect, near, far) : array
    + ortho(left, right, bottom, top, near, far) : array
    + lookAt(eye, at, up) : array
}


class src.engine.model.Model {

    + vao : int
    + vbo : int
    + cbo : int
    + ebo : int
    + shader_program : compiled_shader
    + position : numpy.array[3]
    + rotation : numpy.array[3]
    + indices_size: int
    + draw_mode : GL_DRAW_MODE
    + polygon_mode : GL_POLYGON_MODE
    + update_uniform_values : boolean
    + id : str

    ~ _update_uniforms()
    + set_shaders(vertex_shader, fragment_shader)
    + set_vertices(vertex)
    + set_indices(indices)
    + draw()
}

class src.engine.Render {
    + __window : GLFWWindow
    + __gui : GUIManager
    + init(window_name)
    + on_loop(on_frame_task)
    + change_viewport(init_x, init_y, final_x, final_y)
}

class src.input.NetCDF <<$file>> {
    + read_info(filename) -> array, array, array
}

class src.engine.data.decimation <<$file>>{
    + simple_decimation(x, y, z, n_rows, n_cols): array, array, array
}

class src.utils <<$file>>{
    + LOG_LEVEL : int
    + LOG_FILE_LEVEL : int
    + interpolate(value, value_min, value_max, target_min,target_max) : float
    + get_logger(log_level, log_file_level, module, directory) : logger
}

class src.engine.model.Map2DModel{
    - __x : array
    - __y : array
    - __z : array
    - __color_file : str
    - __colors : array
    - __height_limit : array
    - __vertices : list
    - __indices : list
    - __height : list
    - __max_height : float
    - __min_height : float
    - __projection : list
    + hbo : int

    - __print_vertices()
    - __print_indices()
    - __set_heigh_buffer()
    ~ _update_uniforms()
    + set_color_file(filename)
    + set_vertices_from_grid(x,y,z,quality)

}

class src.input.CTP <<$file>> {
    + read_file(filename: str) : dict
}

class src.engine.model.Map3DModel{

}

'class src.main <<$file>> {
'
'}

class src.engine.GUI.frames.Frame {
    ~ _position: list
    ~ _fixed_position: boolean

    + change_position(new_position)
    + set_fixed_position(value)
    + render()
}

class src.engine.GUI.frames.MainMenuBar {
    - __GUI_manager : GUIManager

    + render()
}

class src.engine.GUI.frames.SampleText {
    + render()
}

class src.engine.GUI.frames.TestWindow {
    + render()
}

class src.engine.controller.Controller {
    - __render
    + init(render)
    + get_on_key_callback()
    + get_resize_callback()
}

class src.engine.scene.Scene {
    - __model_list : list
    + draw()
    + add_model(model)
    + remove_all_models()
    + remove_model(id_model)
    + set_polygon_mode(polygon_mode)
    + refresh_with_model_2d(path_color_file, path_model)
}

' herency
src.engine.model.Map2DModel -u-> src.engine.model.Model
src.engine.model.Map3DModel -u-> src.engine.model.Model

src.engine.GUI.frames.MainMenuBar -u-> src.engine.GUI.frames.Frame
src.engine.GUI.frames.SampleText -u-> src.engine.GUI.frames.Frame
src.engine.GUI.frames.TestWindow -u-> src.engine.GUI.frames.Frame

' uses
src.engine.model.Map2DModel -u.> src.engine.data.decimation
src.engine.model.Map2DModel -u.> src.engine.settings
src.engine.model.Map2DModel -u.> src.engine.model.transformations.transformations
src.engine.model.Map2DModel -u.> src.input.CTP
src.engine.model.Map2DModel -u.> src.utils

src.input.CTP -u.> src.utils

src.engine.model.Model -u.> src.engine.settings

src.engine.Render -u.> src.engine.settings
src.engine.Render -u.> src.engine.GUI.GUIManager

' Uncomment to check main file
'src.main -u.> src.utils
'src.main -u.> src.engine.render
'src.main -u.> src.input.NetCDF
'src.main -u.> src.engine.GUI.GUIManager
'src.main -u.> src.engine.model.Map2DModel

src.engine.GUI.GUIManager -u.> src.utils
src.engine.GUI.GUIManager -u.> src.engine.GUI.frames.Frame
src.engine.GUI.GUIManager -u.> src.engine.settings

src.engine.controller.Controller -u.> src.engine.settings
src.engine.controller.Controller -u.> src.engine.Render
src.engine.controller.Controller -u.> src.utils

src.engine.GUI.frames.MainMenuBar -u.> src.engine.scene.Scene

src.engine.scene.Scene -u.> src.engine.model.Map2DModel
src.engine.scene.Scene -u.> src.engine.model.Model
src.engine.scene.Scene -u.> src.input.NetCDF
src.engine.scene.Scene -u.> src.utils
@enduml