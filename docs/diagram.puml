@startuml

' Variable definition
!$file = "(F,#ff75ff) File"

' Configuration definition
title Class Diagram For Reliefe Creator
set namespaceSeparator .

' Package hierarchy
package src {
    package engine {
        package render {}
        package data {}
        package controller {}
        package GUI {
            package frames {}
        }
        package scene {
            package model {
                package transformations {}
            }
        }
    }
    package input {}
    package program {}
}


' Classes definition
class src.engine.GUI.GUIManager{
    - __component_list: list
    - __engine: Engine
    - __font_bold: IMGUI.font
    - __font_regular: IMGUI.font
    - __glfw_window: GLFWWindow
    - __implementation: GlfwRenderer
    - __io: IMGUI.io
    - __scene: Scene

    {static} + get_frames(gui_manager) : list
    + add_frames(component_list)
    + add_zoom()
    + are_frame_fixed()
    + change_color_file_with_dialog()
    + change_color_of_polygon(polygon_id, color)
    + change_dot_color_of_polygon(polygon_id, color)
    + change_quality(quality)
    + create_new_polygon(): str
    + delete_polygon_by_id(polygon_id)
    + draw_frames()
    + fix_frames_position(value)
    + get_active_model_id(): str
    + get_active_polygon_id(): str
    + get_active_tool(): str
    + get_cpt_file(): str
    + get_gui_key_callback(): function
    + get_left_frame_width(): int
    + get_main_menu_bar_height(): int
    + get_map_position(): list
    + get_polygon_id_list(): list
    + get_polygon_name(polygon_id): str
    + get_quality(): int
    + get_view_mode(): str
    + get_window_height(): int
    + get_window_width(): int
    + get_zoom_level(): float
    + initialize(window, mode)
    + is_program_loading(): boolean
    + less_zoom()
    + load_netcdf_file_with_dialog()
    + optimize_gpu_memory()
    + process_input()
    + refresh_scene_with_model_2d(path_color_file, path_model, model_id)
    + reload_models()
    + render()
    + set_active_polygon(polygon_id)
    + set_active_tool(tool)
    + set_bold_font()
    + set_loading_message(new_msg)
    + set_modal_text(modal_title, msg)
    + set_polygon_mode(polygon_mode)
    + set_polygon_name(polygon_id, new_name)
    + set_regular_font()
}

class src.engine.settings  {
    {static} + CLEAR_COLOR: list
    {static} + fix_frames(fix_frames): boolean
    {static} + FIXEX_FRAMES: boolean
    {static} + FLOAT_BYTES: int
    {static} + FONT_SIZE: int
    {static} + HEIGHT: int
    {static} + LEFT_FRAME_WIDTH: int
    {static} + TOP_FRAME_HEIGHT: int
    {static} + BOTTOM_FRAME_HEIGHT: int
    {static} + MAIN_MENU_BAR_HEIGHT: int
    {static} + QUALITY: int
    {static} + LINE_WIDTH: int
    {static} + POLYGON_LINE_WIDTH: int
    {static} + DOT_SIZE: int
    {static} + POLYGON_DOT_SIZE: int
    {static} + SCENE_BEGIN_X: int
    {static} + SCENE_BEGIN_Y: int
    {static} + SCENE_WIDTH_X: int
    {static} + SCENE_HEIGHT_Y: int
    {static} + VIEW_MODE: str
    {static} + TOP_FRAME_HEIGHT: int
    {static} + WIDTH: int
    {static} + MIN_WIDTH: int
    {static} + MIN_HEIGHT: int
    {static} + MAX_WIDTH: int
    {static} + MAX_HEIGHT: int
    {static} + update_scene_values()
}

class src.engine.scene.model.transformations.transformations <<$file>> {
    + identity() : array
    + uniformScale(s) : array
    + scale(sx,sy,sz) : array
    + rotationX(theta) : array
    + rotationY(theta) : array
    + rotationZ(theta) : array
    + rotationA(theta, axis) : array
    + translate(tx, ty, tz) : array
    + shearing(xy, yx, xz, zx, yz, zy) : array
    + matmul(mats) : array
    + frustum(left, right, bottom, top, near, far) : array
    + perspective(fovy, aspect, near, far) : array
    + ortho(left, right, bottom, top, near, far) : array
    + lookAt(eye, at, up) : array
}


class src.engine.scene.model.Model {
    + vao: int
    + vbo: int
    + cbo: int
    + ebo: int
    + shader_program: compiled_shader
    + position: numpy.array[3]
    + rotation: numpy.array[3]
    + indices_size: int
    + draw_mode: GL_DRAW_MODE
    + polygon_mode: GL_POLYGON_MODE
    + update_uniform_values: boolean
    + id: str
    + scene: Scene

    ~ _update_uniforms()
    + set_color_file(color_file)
    + set_shaders(vertex_shader, fragment_shader)
    + set_vertices(vertex)
    + set_indices(indices)
    + draw()
}

class src.engine.render.Render {
    + __window : GLFWWindow
    + __gui : GUIManager
    + __engine : Engine
    + init(window_name)
    + on_loop(on_frame_task)
}

class src.input.NetCDF <<$file>> {
    + LONGITUDE_KEYS: list
    + LATITUDE_KEYS: list
    + HEIGHT_KEYS: list

    + read_info(filename): array, array, array
    + get_variables_from_grp(grp, key_values): list
}

class src.engine.data.decimation <<$file>>{
    + simple_decimation(x, y, z, n_rows, n_cols): array, array, array
}

class src.utils <<$file>>{
    + LOG_TO_FILE: boolean
    + LOG_TO_CONSOLE: boolean
    + LOG_LEVEL: int
    + LOG_FILE_LEVEL: int
    + LOG_ONLY_LISTED_MODULES: boolean
    + LOG_LIST_MODULES: list

    + interpolate(value, value_min, value_max, target_min,target_max) : float
    + get_logger(log_level, log_file_level, module, directory) : logger
}

class src.engine.scene.model.Map2DModel{
    - __x: array
    - __y: array
    - __z: array
    - __color_file: str
    - __colors: array
    - __height_limit: array
    - __vertices: list
    - __indices: list
    - __height: list
    - __max_height: float
    - __min_height: float
    - __projection: list
    - __left_coordinate: int
    - __right_coordinate: int
    - __top_coordinate: int
    - __bottom_coordinate: int
    - __triangles_to_delete: list
    - __new_indices: list
    + hbo : int

    + calculate_projection_matrix(scene_data, zoom_level)
    + get_projection_matrix(): array
    + get_showed_limits(): dict
    + move(x_movement, y_movement)
    + optimize_gpu_memory_async(then)
    + recalculate_vertices_from_grid_async(quality, then)
    + set_color_file(filename)
    + set_vertices_from_grid_async(x,y,z,quality, then)
    - __add_triangles_inside_zone_to_delete_list(left_coordinate, right_coordinate, top_coordinate, bottom_coordinate)
    - __generate_index_list(step_x, step_y, left_coordinate, right_coordinate, top_coordinate, bottom_coordinate): list
    - __generate_vertices_list(x, y, z, z_value): list
    - __get_index_closest_value(list_to_evaluate, value): int
    - __get_vertex_index(x_pos, y_pos): int
    - __is_triangle_inside_zone(index_triangle, left_coordinate, right_coordinate, top_coordinate, bottom_coordinate): boolean
    - __print_indices()
    - __print_vertices()
    - __set_height_buffer()
    ~ _update_uniforms()

}

class src.engine.scene.model.Polygon{

    - __fragment_shader_file: str
    - __indices_list: list
    - __name: str
    - __point_list: list
    - __polygon_color: tuple
    - __polygon_dot_color: tuple
    - __uniform_color: tuple
    - __vertex_shader_file: str

    - __str__()
    - _update_uniforms()
    + add_point(x, y, z)
    + generate_initial_indices()
    + get_id(): str
    + get_name(): str
    + get_point_list(): list
    + get_point_number(): int
    + set_dot_color(color)
    + set_id(new_id)
    + set_line_color(color)
    + set_name(new_name)
}

class src.input.CTP <<$file>> {
    + read_file(filename: str) : dict
}

class src.engine.scene.model.Map3DModel{

}

'class src.main <<$file>> {
'
'}

class src.engine.GUI.frames.Frame {
    ~ _position: list
    ~ _GUI_manager: GUIManager

    + change_position(new_position)
    + get_position(): list
    + render()
}

class src.engine.GUI.frames.MainMenuBar {
    + render()
}

class src.engine.GUI.frames.Tools {
    - __button_margin_width: int
    - __color_pick_should_open: boolean
    - __color_pick_window_size_x: int
    - __color_pick_window_size_y: int
    - __color_selected_default: int, int, int, int
    - __color_selected_dict: dict
    - __dot_color_selected_default: int, int, int, int
    - __double_button_margin_width: int
    - __input_text_value: str
    - __rename_padding_x: int
    - __rename_size_x: int
    - __rename_size_y: int
    - __slide_bar_quality: int
    - __tool_before_pop_up: str
    - __tools_names_dict: dict

    + color_button(polygon_id)
    + delete_button(active_polygon, polygon_id)
    + generate_polygon_list()
    + rename_polygon_button(polygon_id)
    + render()
    + show_active_tool()
    + show_editing_tools(left_frame_width)
    + show_other_tools(left_frame_width)
    + show_polygon_tools(left_frame_width)
    + show_visualization_tools(left_frame_width)
}

class src.engine.GUI.frames.Debug {
    - __height: int
    + render()
}

class src.engine.GUI.frames.Loading {
    - __loading_message: str
    - __windows_width: int
    - __windows_height: int
    + render()
    + set_loading_message(new_msg)
}

class src.engine.GUI.frames.TextModal {
    - __windows_width: int
    - __windows_height: int
    - __margin_button: int
    - __button_height: int
    - __should_show: boolean
    - __modal_title: str
    - __msg: str

    + render()
    + set_modal_text(modal_title, msg)
}

class src.engine.GUI.frames.TestWindow {
    + render()
}

class src.engine.controller.Controller {
    - __render: Render
    - __scene: Scene
    - __engine: Engine
    - __mouse_old_pos: tuple
    - __is_left_ctrl_pressed: boolean
    - __is_left_alt_pressed: boolean
    + init(render)
    + get_on_key_callback(): function
    + get_resize_callback(): function
    + get_cursor_position_callback(): function
    + get_mouse_button_callback(): function
    + is_inside_scene(mouse_x_pos, mouse_y_pos): boolean
    + set_mouse_pos(new_x, new_y)
    + change_color_file_with_dialog()
    + load_netcdf_file_with_dialog()
}

class src.engine.scene.Scene {
    + add_model(model)
    + add_polygon(polygon)
    + add_vertex_to_active_polygon(position_x, position_y)
    + calculate_map_position_from_window(): (float, float)
    + change_color_of_polygon(polygon_id, color)
    + change_dot_color_of_polygon(polygon_id, color)
    + create_new_polygon(): str
    + delete_polygon_by_id(polygon_id)
    + draw()
    + get_active_model_projection_matrix(): array
    + get_active_model_showed_limits(): dict
    + get_polygon_id_list(): list
    + get_polygon_name(polygon_id): str
    + get_render_settings(): dict
    + get_zoom_level(): float
    + initialize(engine)
    + move_models(x_movement, y_movement)
    + optimize_gpu_memory_async(then)
    + refresh_with_model_2d(path_color_file, path_model, model_id)
    + reload_models_async(then)
    + remove_all_models()
    + remove_model(id_model)
    + set_loading_message(new_msg)
    + set_map_position(new_position)
    + set_polygon_mode(polygon_mode)
    + set_polygon_name(polygon_id, new_name)
    + update_models_colors()
    + update_models_projection_matrix()
    + update_viewport()
    + update_viewport_variables()

    - __3d_model_list: list
    - __engine : Engine
    - __height_viewport: int
    - __model_list : list
    - __polygon_id_count: int
    - __polygon_list: list
    - __should_execute_then_optimize_gpu_memory: int
    - __should_execute_then_reload: int
    - __width_viewport: int
}

class src.engine.Engine {
    + controller: Controller
    + gui_manager: GUIManager
    + render: Render
    + scene: Scene
    + window: GLFWWindow
    - __pending_task_list: list
    + add_vertex_to_active_polygon(position_x, position_y)
    + add_zoom()
    + are_frames_fixed(): boolean
    + change_color_file_with_dialog()
    + change_color_of_polygon(polygon_id, color)
    + change_dot_color_of_polygon(polygon_id,  color)
    + change_height_window(height)
    + change_quality(quality)
    + change_width_window(width)
    + create_new_polygon(): str
    + delete_polygon_by_id(polygon_id)
    + fix_frames()
    + get_active_model_id()
    + get_active_polygon_id(): str
    + get_active_tool(): str
    + get_clear_color(): list
    + get_cpt_file(): str
    + get_float_bytes()
    + get_float_bytes(): int
    + get_font_size(): int
    + get_gui_key_callback(): function
    + get_gui_setting_data(): dict
    + get_map_position(): list
    + get_polygon_id_list(): list
    + get_polygon_name(polygon_id): str
    + get_quality(): int
    + get_render_settings()
    + get_scene_setting_data(): dict
    + get_view_mode(): str
    + get_window_setting_data(): dict
    + get_zoom_level(): float
    + initialize(engine)
    + is_program_loading(): boolean
    + less_zoom()
    + load_netcdf_file_with_dialog()
    + move_scene(x_movement, y_movement)
    + optimize_gpu_memory()
    + refresh_with_model_2d_async(path_color_file, path_model, model_id, then)
    + reload_models()
    + reset_zoom_level()
    + run()
    + set_active_polygon(polygon_id)
    + set_active_tool(tool)
    + set_loading_message(new_msg)
    + set_map_position(new_position)
    + set_modal_text(title_modal, msg)
    + set_polygon_name(polygon_id, new_name)
    + set_task_for_next_frame(task)
    + set_task_with_loading_frame(task)
    + set_thread_task(parallel_task, then)
    + update_pending_tasks()
    + update_scene_models_colors()
    + update_scene_values()
    + update_threads()

}

class src.program.Program {

    - __active_model: str
    - __active_polygon: str
    - __active_tool: str
    - __CPT_file: str
    - __engine: Engine
    - __loading: boolean
    - __map_position: list
    - __zoom_level: float

    + add_zoom()
    + change_cpt_file_with_dialog()
    + get_active_model(): str
    + get_active_polygon_id(): str
    + get_active_tool(): str
    + get_cpt_file(): str
    + get_map_position(): list
    + initialize(program)
    + is_loading(): boolean
    + less_zoom()
    + load_netcdf_file_with_dialog()
    + reset_zoom_level()
    + run()
    + set_active_model(new_model_id)
    + set_active_polygon(polygon_id)
    + set_active_tool(new_tool)
    + set_cpt_file(new_file)
    + set_loading(is_loading)
}

' herency
src.engine.scene.model.Map2DModel -u-|> src.engine.scene.model.Model
src.engine.scene.model.Map3DModel -u-|> src.engine.scene.model.Model
src.engine.scene.model.Polygon -u-|> src.engine.scene.model.Model

src.engine.GUI.frames.Debug -u-|> src.engine.GUI.frames.Frame
src.engine.GUI.frames.Loading -u-|> src.engine.GUI.frames.Frame
src.engine.GUI.frames.MainMenuBar -u-|> src.engine.GUI.frames.Frame
src.engine.GUI.frames.TestWindow -u-|> src.engine.GUI.frames.Frame
src.engine.GUI.frames.TextModal -u-|> src.engine.GUI.frames.Frame
src.engine.GUI.frames.Tools -u-|> src.engine.GUI.frames.Frame

' uses
src.engine.scene.model.Map2DModel -u.> src.engine.data.decimation
src.engine.scene.model.Map2DModel -u.> src.engine.scene.model.transformations.transformations
src.engine.scene.model.Map2DModel -u.> src.input.CTP

src.engine.Engine <-d.> src.engine.render.Render
src.engine.Engine <-d.> src.engine.GUI.GUIManager
src.engine.Engine <-d.> src.engine.controller.Controller
src.engine.Engine <-d.> src.engine.scene.Scene
src.engine.Engine -u.> src.engine.settings
src.engine.Engine <-l.> src.program.Program

src.engine.GUI.frames.Frame <-u.> src.engine.GUI.GUIManager

src.engine.scene.Scene .> src.engine.scene.model.Model
src.engine.scene.Scene -u.> src.input.NetCDF
@enduml